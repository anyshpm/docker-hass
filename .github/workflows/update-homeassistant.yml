name: Update Home Assistant Version

# Note: If you encounter permission errors, you may need to:
# 1. Go to repository Settings > Actions > General
# 2. Set "Workflow permissions" to "Read and write permissions"
# 3. Enable "Allow GitHub Actions to create and approve pull requests"
# 
# Alternative: Create a Personal Access Token (PAT) with repo permissions
# and add it as a repository secret named 'PAT_TOKEN', then replace 
# ${{ secrets.GITHUB_TOKEN }} with ${{ secrets.PAT_TOKEN }} in the checkout step

on:
  schedule:
    # Run daily at 06:00 UTC to check for new versions
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_update:
        description: 'Force update even if version is the same'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: homeassistant/home-assistant
  # Enable debug logging
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: 🐳 Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: 📋 Get current Home Assistant version from Dockerfile
        id: current-version
        run: |
          CURRENT_VERSION=$(grep -oP 'FROM homeassistant/home-assistant:\K[^\s]+' Dockerfile)
          
          # Validate that we extracted a valid version
          if [ -z "$CURRENT_VERSION" ]; then
            echo "❌ Failed to extract current Home Assistant version from Dockerfile"
            echo "Please verify that Dockerfile contains a valid FROM line with homeassistant/home-assistant image"
            exit 1
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: 🔍 Get latest Home Assistant version
        id: latest-version
        run: |
          # Get the latest tag from Docker Hub API
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/homeassistant/home-assistant/tags?page_size=100&ordering=last_updated" | \
            jq -r '.results[] | select(.name | test("^[0-9]{4}\\.[0-9]+\\.[0-9]+$")) | .name' | \
            sort -V | tail -1)
          
          # Validate that we got a valid version
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "❌ Failed to fetch latest Home Assistant version from Docker Hub API"
            echo "This could be due to:"
            echo "  - Docker Hub API is down or rate limiting"
            echo "  - Network connectivity issues"
            echo "  - Changes in Docker Hub API response format"
            echo "  - No valid semantic version tags found"
            exit 1
          fi
          
          # Additional validation for version format
          if ! echo "$LATEST_VERSION" | grep -qE '^[0-9]{4}\.[0-9]+\.[0-9]+$'; then
            echo "❌ Invalid version format detected: '$LATEST_VERSION'"
            echo "Expected format: YYYY.MM.DD (e.g., 2025.4.1)"
            exit 1
          fi
          
          echo "Latest version: $LATEST_VERSION"
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          
          # Also get the image digest for verification
          DIGEST=$(curl -s "https://registry.hub.docker.com/v2/repositories/homeassistant/home-assistant/tags/$LATEST_VERSION" | \
            jq -r '.digest // "unknown"')
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

      - name: 🔄 Compare versions
        id: compare
        run: |
          CURRENT="${{ steps.current-version.outputs.version }}"
          LATEST="${{ steps.latest-version.outputs.version }}"
          FORCE_UPDATE="${{ github.event.inputs.force_update }}"
          
          echo "Current: $CURRENT"
          echo "Latest: $LATEST"
          echo "Force update: $FORCE_UPDATE"
          
          if [ "$CURRENT" != "$LATEST" ] || [ "$FORCE_UPDATE" = "true" ]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "✅ Update needed: $CURRENT -> $LATEST"
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No update needed. Current version $CURRENT is up to date."
          fi

      - name: 🛠️ Update Dockerfile
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          LATEST_VERSION="${{ steps.latest-version.outputs.version }}"
          
          # Update the FROM line in Dockerfile
          sed -i "s/FROM homeassistant\/home-assistant:$CURRENT_VERSION/FROM homeassistant\/home-assistant:$LATEST_VERSION/g" Dockerfile
          
          # Verify the change was made
          if grep -q "FROM homeassistant/home-assistant:$LATEST_VERSION" Dockerfile; then
            echo "✅ Dockerfile updated successfully"
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to update Dockerfile"
            exit 1
          fi

      - name: 🧪 Test build with new version
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          echo "🔨 Testing Docker build with new version..."
          docker build --no-cache -t test-build:latest .
          echo "✅ Build test successful"
          
          # Test that the image can start (basic smoke test)
          echo "🔍 Running smoke test..."
          docker run --rm -d --name test-container test-build:latest || true
          sleep 10
          
          # Check if container is running or has exited successfully
          if docker ps -a --filter "name=test-container" --format "{{.Status}}" | grep -q "Exited (0)"; then
            echo "✅ Container smoke test passed - exited successfully"
          elif docker ps --filter "name=test-container" --format "{{.Names}}" | grep -q "test-container"; then
            echo "✅ Container smoke test passed - still running"
            docker stop test-container
          else
            echo "❌ Container smoke test failed"
            docker logs test-container || true
            exit 1
          fi
          
          # Clean up
          docker rm -f test-container 2>/dev/null || true
          echo "✅ All tests passed"

      - name: 📝 Update README badges
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          LATEST_VERSION="${{ steps.latest-version.outputs.version }}"
          
          # Update Home Assistant version badge in README
          if [ -f README.md ]; then
            sed -i "s/Home%20Assistant-[0-9]\{4\}\.[0-9]\+\.[0-9]\+-blue/Home%20Assistant-${LATEST_VERSION}-blue/g" README.md
            echo "✅ README badges updated"
          fi

      - name: 📊 Generate change summary
        if: steps.compare.outputs.needs_update == 'true'
        id: changes
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.version }}"
          LATEST_VERSION="${{ steps.latest-version.outputs.version }}"
          
          cat > CHANGES.md << EOF
          # Home Assistant Version Update
          
          ## 📋 Summary
          - **Previous version**: \`$CURRENT_VERSION\`
          - **New version**: \`$LATEST_VERSION\`
          - **Update date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## 🔄 Changes Made
          - Updated \`Dockerfile\` to use Home Assistant version \`$LATEST_VERSION\`
          - Updated README badges to reflect new version
          - Verified build compatibility with new version
          
          ## 🧪 Testing
          - ✅ Docker build test passed
          - ✅ Image creation successful
          
          ## 📚 Release Notes
          For detailed release notes, see: https://github.com/home-assistant/core/releases/tag/$LATEST_VERSION
          EOF
          
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          cat CHANGES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📋 Create Pull Request
        if: steps.compare.outputs.needs_update == 'true'
        uses: actions/github-script@v7
        with:
          debug: true
          script: |
            console.log('Starting PR creation script...');
            
            // Extract variables with debug logging
            const latestVersion = '${{ steps.latest-version.outputs.version }}';
            const currentVersion = '${{ steps.current-version.outputs.version }}';
            const changesSummary = String(`${{ steps.changes.outputs.summary }}`);
            
            console.log('Variables extracted:');
            console.log('- Latest version:', latestVersion);
            console.log('- Current version:', currentVersion);
            console.log('- Changes summary length:', changesSummary.length);
            
            const title = `🔄 Update Home Assistant to ${latestVersion}`;
            console.log('PR title:', title);
            
            const body = `${changesSummary}
            
            ## 🧪 Automated Testing Results
            - ✅ Docker build test passed
            - ✅ Container smoke test passed
            - ✅ Image creation successful
            
            ## 📋 Manual Steps Required
            **⚠️ This is an automated detection only. To apply these changes:**
            
            1. **Download the updated files**:
               - Updated Dockerfile with version ${latestVersion}
               - Updated README.md with new version badges
            
            2. **Create a new branch manually**:
               \`\`\`bash
               git checkout -b update-homeassistant-${latestVersion}
               \`\`\`
            
            3. **Apply the changes and commit**:
               \`\`\`bash
               # Update Dockerfile FROM line to:
               # FROM homeassistant/home-assistant:${latestVersion}
               
               # Update README.md version badge to:
               # Home%20Assistant-${latestVersion}-blue
               
               git add Dockerfile README.md
               git commit -m "🔄 Update Home Assistant to version ${latestVersion}"
               git push origin update-homeassistant-${latestVersion}
               \`\`\`
            
            4. **Create Pull Request manually** or merge this automated detection PR
            
            ## 🔍 Review Checklist
            - [ ] Review the automated changes above
            - [ ] Verify Telegram proxy functionality still works
            - [ ] Check for any breaking changes in Home Assistant release notes
            - [ ] Update any dependent documentation if needed
            
            ## 📚 Home Assistant Release Notes
            For detailed release notes, see: https://github.com/home-assistant/core/releases/tag/${latestVersion}
            
            **Triggered by**: Automated version check workflow`;
            
            console.log('PR body length:', body.length);
            
            try {
              console.log('Creating Pull Request...');
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                head: 'main',
                base: 'main',
                body: body
              });
              
              console.log('PR created successfully:', pr.number);
              
              // Add labels to the PR
              console.log('Adding labels to PR...');
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['automated-update', 'homeassistant-version', 'manual-action-required']
              });
              
              console.log(`Created Pull Request #${pr.number}: ${pr.html_url}`);
            } catch (error) {
              console.error('Error creating PR:', error);
              console.error('Error details:', JSON.stringify(error, null, 2));
              throw error;
            }

      - name: 📊 Job Summary
        if: always()
        run: |
          echo "## 🔄 Home Assistant Version Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Field | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Current Version | \`${{ steps.current-version.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Latest Version | \`${{ steps.latest-version.outputs.version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Update Needed | ${{ steps.compare.outputs.needs_update }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Workflow Trigger | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Timestamp | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.compare.outputs.needs_update }}" = "true" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ✅ Detection Complete" >> $GITHUB_STEP_SUMMARY
            echo "- Detected new Home Assistant version: \`${{ steps.latest-version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Verified build compatibility and smoke tests" >> $GITHUB_STEP_SUMMARY
            echo "- Created Pull Request with manual update instructions" >> $GITHUB_STEP_SUMMARY
            echo "- **Manual action required**: Follow PR instructions to apply changes" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ℹ️ No Updates Required" >> $GITHUB_STEP_SUMMARY
            echo "The current version is already up to date." >> $GITHUB_STEP_SUMMARY
          fi

