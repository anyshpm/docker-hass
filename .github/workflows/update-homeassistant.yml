name: Update Home Assistant Version

on:
  push:
    branches: [ "*" ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 06:00 UTC
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update even if version is the same'
        type: boolean
        default: false

jobs:
  check-and-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: 🐳 Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: 📋 Get versions
        id: versions
        run: |
          CURRENT=$(grep -oP 'FROM homeassistant/home-assistant:\K[^\s]+' Dockerfile)
          LATEST=$(curl -s "https://registry.hub.docker.com/v2/repositories/homeassistant/home-assistant/tags?page_size=100&ordering=last_updated" | \
            jq -r '.results[] | select(.name | test("^[0-9]{4}\\.[0-9]+\\.[0-9]+$")) | .name' | \
            sort -V | tail -1)
          
          # Validate versions
          [[ -z "$CURRENT" || -z "$LATEST" || "$LATEST" == "null" ]] && exit 1
          
          echo "current=$CURRENT" >> $GITHUB_OUTPUT
          echo "latest=$LATEST" >> $GITHUB_OUTPUT
          echo "Current: $CURRENT, Latest: $LATEST"



      - name: 🔄 Check if update needed
        id: compare
        run: |
          CURRENT="${{ steps.versions.outputs.current }}"
          LATEST="${{ steps.versions.outputs.latest }}"
          
          if [ "$CURRENT" != "$LATEST" ] || [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "needs_update=true" >> $GITHUB_OUTPUT
            echo "✅ Update needed: $CURRENT -> $LATEST"
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Already up to date: $CURRENT"
          fi

      - name: 🛠️ Update files
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          CURRENT="${{ steps.versions.outputs.current }}"
          LATEST="${{ steps.versions.outputs.latest }}"
          
          # Update Dockerfile
          sed -i "s/FROM homeassistant\/home-assistant:$CURRENT/FROM homeassistant\/home-assistant:$LATEST/g" Dockerfile
          
          # Update README badges
          sed -i "s/Home%20Assistant-[0-9]\{4\}\.[0-9]\+\.[0-9]\+-blue/Home%20Assistant-${LATEST}-blue/g" README.md
          
          echo "✅ Files updated: $CURRENT -> $LATEST"

      - name: 🧪 Test build
        if: steps.compare.outputs.needs_update == 'true'
        run: |
          docker build --no-cache -t test-build .
          docker run --rm -d --name test-container test-build || true
          sleep 10
          
          if docker ps -a --filter "name=test-container" --format "{{.Status}}" | grep -qE "(Exited \(0\)|Up)"; then
            echo "✅ Build and smoke test passed"
          else
            echo "❌ Test failed"
            docker logs test-container 2>/dev/null || true
            exit 1
          fi
          
          docker rm -f test-container 2>/dev/null || true



      - name: 🚀 Create branch and commit
        if: steps.compare.outputs.needs_update == 'true'
        id: commit
        run: |
          LATEST="${{ steps.versions.outputs.latest }}"
          BRANCH="update-homeassistant-${LATEST}"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b "$BRANCH"
          git add Dockerfile README.md
          
          if ! git diff --staged --quiet; then
            git commit -m "🔄 Update Home Assistant to $LATEST"
            git push origin "$BRANCH"
            echo "branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "✅ Changes committed and pushed"
          else
            echo "❌ No changes to commit"
            exit 1
          fi



      - name: 📋 Create Pull Request
        if: steps.compare.outputs.needs_update == 'true' && steps.commit.outputs.branch
        uses: actions/github-script@v7
        with:
          script: |
            const current = '${{ steps.versions.outputs.current }}';
            const latest = '${{ steps.versions.outputs.latest }}';
            const branch = '${{ steps.commit.outputs.branch }}';
            
            const title = `🔄 Update Home Assistant to ${latest}`;
            const body = `## 📋 Summary
            - **Previous**: \`${current}\`
            - **New**: \`${latest}\`
            - **Date**: ${new Date().toUTCString()}
            
            ## 🧪 Tests Passed
            - ✅ Docker build successful
            - ✅ Container smoke test passed
            
            ## 📚 Release Notes
            https://github.com/home-assistant/core/releases/tag/${latest}`;
            
            const bases = ['main', 'master'];
            for (const base of bases) {
              try {
                const { data: pr } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title, head: branch, base, body
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['automated-update', 'homeassistant-version']
                });
                
                console.log(`✅ Created PR #${pr.number}: ${pr.html_url}`);
                return;
              } catch (error) {
                if (base === bases[bases.length - 1]) throw error;
              }
            }

      - name: 📊 Summary
        if: always()
        run: |
          echo "## 🔄 Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Current | Latest | Updated |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| \`${{ steps.versions.outputs.current }}\` | \`${{ steps.versions.outputs.latest }}\` | ${{ steps.compare.outputs.needs_update }} |" >> $GITHUB_STEP_SUMMARY

